# === TEST FOR N =      100 === #
[!] Running cycle 1 for heap sort... sorted in 0 ms.
[!] Running cycle 2 for heap sort... sorted in 0 ms.
[!] Running cycle 3 for heap sort... sorted in 0 ms.
[!] Running cycle 4 for heap sort... sorted in 1 ms.
[!] Running cycle 5 for heap sort... sorted in 0 ms.
[!] Running cycle 6 for heap sort... sorted in 0 ms.
[!] Running cycle 7 for heap sort... sorted in 0 ms.
[!] Running cycle 8 for heap sort... sorted in 0 ms.
[!] Running cycle 9 for heap sort... sorted in 1 ms.
[!] Running cycle 10 for heap sort... sorted in 0 ms.
[$] heap sort took an average of 0.2000 ms to sort N=100

[!] Running cycle 1 for insertion sort... sorted in 0 ms.
[!] Running cycle 2 for insertion sort... sorted in 0 ms.
[!] Running cycle 3 for insertion sort... sorted in 1 ms.
[!] Running cycle 4 for insertion sort... sorted in 0 ms.
[!] Running cycle 5 for insertion sort... sorted in 0 ms.
[!] Running cycle 6 for insertion sort... sorted in 1 ms.
[!] Running cycle 7 for insertion sort... sorted in 0 ms.
[!] Running cycle 8 for insertion sort... sorted in 0 ms.
[!] Running cycle 9 for insertion sort... sorted in 1 ms.
[!] Running cycle 10 for insertion sort... sorted in 0 ms.
[$] insertion sort took an average of 0.3000 ms to sort N=100

[!] Running cycle 1 for merge sort... sorted in 0 ms.
[!] Running cycle 2 for merge sort... sorted in 0 ms.
[!] Running cycle 3 for merge sort... sorted in 1 ms.
[!] Running cycle 4 for merge sort... sorted in 0 ms.
[!] Running cycle 5 for merge sort... sorted in 0 ms.
[!] Running cycle 6 for merge sort... sorted in 0 ms.
[!] Running cycle 7 for merge sort... sorted in 0 ms.
[!] Running cycle 8 for merge sort... sorted in 1 ms.
[!] Running cycle 9 for merge sort... sorted in 0 ms.
[!] Running cycle 10 for merge sort... sorted in 0 ms.
[$] merge sort took an average of 0.2000 ms to sort N=100

[!] Running cycle 1 for selection sort... sorted in 1 ms.
[!] Running cycle 2 for selection sort... sorted in 0 ms.
[!] Running cycle 3 for selection sort... sorted in 0 ms.
[!] Running cycle 4 for selection sort... sorted in 1 ms.
[!] Running cycle 5 for selection sort... sorted in 0 ms.
[!] Running cycle 6 for selection sort... sorted in 0 ms.
[!] Running cycle 7 for selection sort... sorted in 0 ms.
[!] Running cycle 8 for selection sort... sorted in 1 ms.
[!] Running cycle 9 for selection sort... sorted in 0 ms.
[!] Running cycle 10 for selection sort... sorted in 0 ms.
[$] selection sort took an average of 0.3000 ms to sort N=100

[!] Running cycle 1 for smooth sort... sorted in 0 ms.
[!] Running cycle 2 for smooth sort... sorted in 1 ms.
[!] Running cycle 3 for smooth sort... sorted in 0 ms.
[!] Running cycle 4 for smooth sort... sorted in 1 ms.
[!] Running cycle 5 for smooth sort... sorted in 0 ms.
[!] Running cycle 6 for smooth sort... sorted in 0 ms.
[!] Running cycle 7 for smooth sort... sorted in 1 ms.
[!] Running cycle 8 for smooth sort... sorted in 0 ms.
[!] Running cycle 9 for smooth sort... sorted in 1 ms.
[!] Running cycle 10 for smooth sort... sorted in 0 ms.
[$] smooth sort took an average of 0.4000 ms to sort N=100

[!] Running cycle 1 for tim sort... sorted in 0 ms.
[!] Running cycle 2 for tim sort... sorted in 0 ms.
[!] Running cycle 3 for tim sort... sorted in 1 ms.
[!] Running cycle 4 for tim sort... sorted in 0 ms.
[!] Running cycle 5 for tim sort... sorted in 0 ms.
[!] Running cycle 6 for tim sort... sorted in 0 ms.
[!] Running cycle 7 for tim sort... sorted in 0 ms.
[!] Running cycle 8 for tim sort... sorted in 0 ms.
[!] Running cycle 9 for tim sort... sorted in 1 ms.
[!] Running cycle 10 for tim sort... sorted in 0 ms.
[$] tim sort took an average of 0.2000 ms to sort N=100


# === TEST FOR N =    25000 === #
[!] Running cycle 1 for heap sort... sorted in 53 ms.
[!] Running cycle 2 for heap sort... sorted in 39 ms.
[!] Running cycle 3 for heap sort... sorted in 39 ms.
[!] Running cycle 4 for heap sort... sorted in 38 ms.
[!] Running cycle 5 for heap sort... sorted in 40 ms.
[!] Running cycle 6 for heap sort... sorted in 39 ms.
[!] Running cycle 7 for heap sort... sorted in 39 ms.
[!] Running cycle 8 for heap sort... sorted in 40 ms.
[!] Running cycle 9 for heap sort... sorted in 39 ms.
[!] Running cycle 10 for heap sort... sorted in 40 ms.
[$] heap sort took an average of 40.6000 ms to sort N=25000

[!] Running cycle 1 for insertion sort... sorted in 8267 ms.
[!] Running cycle 2 for insertion sort... sorted in 8329 ms.
[!] Running cycle 3 for insertion sort... sorted in 8209 ms.
[!] Running cycle 4 for insertion sort... sorted in 8220 ms.
[!] Running cycle 5 for insertion sort... sorted in 8173 ms.
[!] Running cycle 6 for insertion sort... sorted in 8153 ms.
[!] Running cycle 7 for insertion sort... sorted in 8180 ms.
[!] Running cycle 8 for insertion sort... sorted in 8408 ms.
[!] Running cycle 9 for insertion sort... sorted in 8317 ms.
[!] Running cycle 10 for insertion sort... sorted in 8237 ms.
[$] insertion sort took an average of 8249.3000 ms to sort N=25000

[!] Running cycle 1 for merge sort... sorted in 72 ms.
[!] Running cycle 2 for merge sort... sorted in 67 ms.
[!] Running cycle 3 for merge sort... sorted in 63 ms.
[!] Running cycle 4 for merge sort... sorted in 64 ms.
[!] Running cycle 5 for merge sort... sorted in 63 ms.
[!] Running cycle 6 for merge sort... sorted in 63 ms.
[!] Running cycle 7 for merge sort... sorted in 62 ms.
[!] Running cycle 8 for merge sort... sorted in 61 ms.
[!] Running cycle 9 for merge sort... sorted in 63 ms.
[!] Running cycle 10 for merge sort... sorted in 61 ms.
[$] merge sort took an average of 63.9000 ms to sort N=25000

[!] Running cycle 1 for selection sort... sorted in 3524 ms.
[!] Running cycle 2 for selection sort... sorted in 3782 ms.
[!] Running cycle 3 for selection sort... sorted in 3394 ms.
[!] Running cycle 4 for selection sort... sorted in 3333 ms.
[!] Running cycle 5 for selection sort... sorted in 3295 ms.
[!] Running cycle 6 for selection sort... sorted in 3396 ms.
[!] Running cycle 7 for selection sort... sorted in 3333 ms.
[!] Running cycle 8 for selection sort... sorted in 3281 ms.
[!] Running cycle 9 for selection sort... sorted in 3328 ms.
[!] Running cycle 10 for selection sort... sorted in 3285 ms.
[$] selection sort took an average of 3395.1000 ms to sort N=25000

[!] Running cycle 1 for smooth sort... sorted in 99 ms.
[!] Running cycle 2 for smooth sort... sorted in 100 ms.
[!] Running cycle 3 for smooth sort... sorted in 99 ms.
[!] Running cycle 4 for smooth sort... sorted in 98 ms.
[!] Running cycle 5 for smooth sort... sorted in 98 ms.
[!] Running cycle 6 for smooth sort... sorted in 99 ms.
[!] Running cycle 7 for smooth sort... sorted in 101 ms.
[!] Running cycle 8 for smooth sort... sorted in 101 ms.
[!] Running cycle 9 for smooth sort... sorted in 100 ms.
[!] Running cycle 10 for smooth sort... sorted in 100 ms.
[$] smooth sort took an average of 99.5000 ms to sort N=25000

[!] Running cycle 1 for tim sort... sorted in 49 ms.
[!] Running cycle 2 for tim sort... sorted in 49 ms.
[!] Running cycle 3 for tim sort... sorted in 49 ms.
[!] Running cycle 4 for tim sort... sorted in 49 ms.
[!] Running cycle 5 for tim sort... sorted in 48 ms.
[!] Running cycle 6 for tim sort... sorted in 50 ms.
[!] Running cycle 7 for tim sort... sorted in 49 ms.
[!] Running cycle 8 for tim sort... sorted in 50 ms.
[!] Running cycle 9 for tim sort... sorted in 49 ms.
[!] Running cycle 10 for tim sort... sorted in 51 ms.
[$] tim sort took an average of 49.3000 ms to sort N=25000


# === TEST FOR N =    50000 === #
[!] Running cycle 1 for heap sort... sorted in 90 ms.
[!] Running cycle 2 for heap sort... sorted in 90 ms.
[!] Running cycle 3 for heap sort... sorted in 90 ms.
[!] Running cycle 4 for heap sort... sorted in 90 ms.
[!] Running cycle 5 for heap sort... sorted in 90 ms.
[!] Running cycle 6 for heap sort... sorted in 92 ms.
[!] Running cycle 7 for heap sort... sorted in 90 ms.
[!] Running cycle 8 for heap sort... sorted in 100 ms.
[!] Running cycle 9 for heap sort... sorted in 87 ms.
[!] Running cycle 10 for heap sort... sorted in 87 ms.
[$] heap sort took an average of 90.6000 ms to sort N=50000

[!] Running cycle 1 for insertion sort... sorted in 33929 ms.
[!] Running cycle 2 for insertion sort... sorted in 37324 ms.
[!] Running cycle 3 for insertion sort... sorted in 37580 ms.
[!] Running cycle 4 for insertion sort... sorted in 37477 ms.
[!] Running cycle 5 for insertion sort... sorted in 37379 ms.
[!] Running cycle 6 for insertion sort... sorted in 37132 ms.
[!] Running cycle 7 for insertion sort... sorted in 38240 ms.
[!] Running cycle 8 for insertion sort... sorted in 38205 ms.
[!] Running cycle 9 for insertion sort... sorted in 37713 ms.
[!] Running cycle 10 for insertion sort... sorted in 38419 ms.
[$] insertion sort took an average of 37339.8000 ms to sort N=50000

[!] Running cycle 1 for merge sort... sorted in 163 ms.
[!] Running cycle 2 for merge sort... sorted in 146 ms.
[!] Running cycle 3 for merge sort... sorted in 135 ms.
[!] Running cycle 4 for merge sort... sorted in 134 ms.
[!] Running cycle 5 for merge sort... sorted in 138 ms.
[!] Running cycle 6 for merge sort... sorted in 131 ms.
[!] Running cycle 7 for merge sort... sorted in 133 ms.
[!] Running cycle 8 for merge sort... sorted in 132 ms.
[!] Running cycle 9 for merge sort... sorted in 134 ms.
[!] Running cycle 10 for merge sort... sorted in 168 ms.
[$] merge sort took an average of 141.4000 ms to sort N=50000

[!] Running cycle 1 for selection sort... sorted in 18560 ms.
[!] Running cycle 2 for selection sort... sorted in 18239 ms.
[!] Running cycle 3 for selection sort... sorted in 17351 ms.
[!] Running cycle 4 for selection sort... sorted in 17646 ms.
[!] Running cycle 5 for selection sort... sorted in 17480 ms.
[!] Running cycle 6 for selection sort... sorted in 17417 ms.
[!] Running cycle 7 for selection sort... sorted in 17537 ms.
[!] Running cycle 8 for selection sort... sorted in 17797 ms.
[!] Running cycle 9 for selection sort... sorted in 18564 ms.
[!] Running cycle 10 for selection sort... sorted in 18718 ms.
[$] selection sort took an average of 17930.9000 ms to sort N=50000

[!] Running cycle 1 for smooth sort... sorted in 237 ms.
[!] Running cycle 2 for smooth sort... sorted in 241 ms.
[!] Running cycle 3 for smooth sort... sorted in 244 ms.
[!] Running cycle 4 for smooth sort... sorted in 247 ms.
[!] Running cycle 5 for smooth sort... sorted in 240 ms.
[!] Running cycle 6 for smooth sort... sorted in 230 ms.
[!] Running cycle 7 for smooth sort... sorted in 233 ms.
[!] Running cycle 8 for smooth sort... sorted in 240 ms.
[!] Running cycle 9 for smooth sort... sorted in 236 ms.
[!] Running cycle 10 for smooth sort... sorted in 232 ms.
[$] smooth sort took an average of 238.0000 ms to sort N=50000

[!] Running cycle 1 for tim sort... sorted in 116 ms.
[!] Running cycle 2 for tim sort... sorted in 112 ms.
[!] Running cycle 3 for tim sort... sorted in 108 ms.
[!] Running cycle 4 for tim sort... sorted in 107 ms.
[!] Running cycle 5 for tim sort... sorted in 106 ms.
[!] Running cycle 6 for tim sort... sorted in 157 ms.
[!] Running cycle 7 for tim sort... sorted in 109 ms.
[!] Running cycle 8 for tim sort... sorted in 109 ms.
[!] Running cycle 9 for tim sort... sorted in 110 ms.
[!] Running cycle 10 for tim sort... sorted in 110 ms.
[$] tim sort took an average of 114.4000 ms to sort N=50000


# === TEST FOR N =    75000 === #
[!] Running cycle 1 for heap sort... sorted in 153 ms.
[!] Running cycle 2 for heap sort... sorted in 150 ms.
[!] Running cycle 3 for heap sort... sorted in 175 ms.
[!] Running cycle 4 for heap sort... sorted in 157 ms.
[!] Running cycle 5 for heap sort... sorted in 158 ms.
[!] Running cycle 6 for heap sort... sorted in 165 ms.
[!] Running cycle 7 for heap sort... sorted in 158 ms.
[!] Running cycle 8 for heap sort... sorted in 164 ms.
[!] Running cycle 9 for heap sort... sorted in 164 ms.
[!] Running cycle 10 for heap sort... sorted in 163 ms.
[$] heap sort took an average of 160.7000 ms to sort N=75000

[!] Running cycle 1 for insertion sort... sorted in 90600 ms.
[!] Running cycle 2 for insertion sort... sorted in 89446 ms.
[!] Running cycle 3 for insertion sort... sorted in 88596 ms.
[!] Running cycle 4 for insertion sort... sorted in 92611 ms.
[!] Running cycle 5 for insertion sort... sorted in 89237 ms.
[!] Running cycle 6 for insertion sort... sorted in 95526 ms.
[!] Running cycle 7 for insertion sort... sorted in 89119 ms.
[!] Running cycle 8 for insertion sort... sorted in 91843 ms.
[!] Running cycle 9 for insertion sort... sorted in 90108 ms.
[!] Running cycle 10 for insertion sort... sorted in 90884 ms.
[$] insertion sort took an average of 90797.0000 ms to sort N=75000

[!] Running cycle 1 for merge sort... sorted in 275 ms.
[!] Running cycle 2 for merge sort... sorted in 271 ms.
[!] Running cycle 3 for merge sort... sorted in 271 ms.
[!] Running cycle 4 for merge sort... sorted in 265 ms.
[!] Running cycle 5 for merge sort... sorted in 276 ms.
[!] Running cycle 6 for merge sort... sorted in 261 ms.
[!] Running cycle 7 for merge sort... sorted in 262 ms.
[!] Running cycle 8 for merge sort... sorted in 267 ms.
[!] Running cycle 9 for merge sort... sorted in 265 ms.
[!] Running cycle 10 for merge sort... sorted in 246 ms.
[$] merge sort took an average of 265.9000 ms to sort N=75000

[!] Running cycle 1 for selection sort... sorted in 47825 ms.
[!] Running cycle 2 for selection sort... sorted in 47774 ms.
[!] Running cycle 3 for selection sort... sorted in 49832 ms.
[!] Running cycle 4 for selection sort... sorted in 49480 ms.
[!] Running cycle 5 for selection sort... sorted in 46911 ms.
[!] Running cycle 6 for selection sort... sorted in 48217 ms.
[!] Running cycle 7 for selection sort... sorted in 49163 ms.
[!] Running cycle 8 for selection sort... sorted in 50274 ms.
[!] Running cycle 9 for selection sort... sorted in 49318 ms.
[!] Running cycle 10 for selection sort... sorted in 49097 ms.
[$] selection sort took an average of 48789.1000 ms to sort N=75000

[!] Running cycle 1 for smooth sort... sorted in 403 ms.
[!] Running cycle 2 for smooth sort... sorted in 421 ms.
[!] Running cycle 3 for smooth sort... sorted in 403 ms.
[!] Running cycle 4 for smooth sort... sorted in 375 ms.
[!] Running cycle 5 for smooth sort... sorted in 383 ms.
[!] Running cycle 6 for smooth sort... sorted in 401 ms.
[!] Running cycle 7 for smooth sort... sorted in 436 ms.
[!] Running cycle 8 for smooth sort... sorted in 400 ms.
[!] Running cycle 9 for smooth sort... sorted in 416 ms.
[!] Running cycle 10 for smooth sort... sorted in 403 ms.
[$] smooth sort took an average of 404.1000 ms to sort N=75000

[!] Running cycle 1 for tim sort... sorted in 249 ms.
[!] Running cycle 2 for tim sort... sorted in 235 ms.
[!] Running cycle 3 for tim sort... sorted in 231 ms.
[!] Running cycle 4 for tim sort... sorted in 226 ms.
[!] Running cycle 5 for tim sort... sorted in 236 ms.
[!] Running cycle 6 for tim sort... sorted in 230 ms.
[!] Running cycle 7 for tim sort... sorted in 225 ms.
[!] Running cycle 8 for tim sort... sorted in 235 ms.
[!] Running cycle 9 for tim sort... sorted in 246 ms.
[!] Running cycle 10 for tim sort... sorted in 239 ms.
[$] tim sort took an average of 235.2000 ms to sort N=75000


# === TEST FOR N =   100000 === #
[!] Running cycle 1 for heap sort... sorted in 238 ms.
[!] Running cycle 2 for heap sort... sorted in 227 ms.
[!] Running cycle 3 for heap sort... sorted in 232 ms.
[!] Running cycle 4 for heap sort... sorted in 230 ms.
[!] Running cycle 5 for heap sort... sorted in 231 ms.
[!] Running cycle 6 for heap sort... sorted in 227 ms.
[!] Running cycle 7 for heap sort... sorted in 231 ms.
[!] Running cycle 8 for heap sort... sorted in 235 ms.
[!] Running cycle 9 for heap sort... sorted in 214 ms.
[!] Running cycle 10 for heap sort... sorted in 225 ms.
[$] heap sort took an average of 229.0000 ms to sort N=100000

[!] Running cycle 1 for insertion sort... sorted in 164492 ms.
[!] Running cycle 2 for insertion sort... sorted in 168324 ms.
[!] Running cycle 3 for insertion sort... sorted in 168168 ms.
[!] Running cycle 4 for insertion sort... sorted in 164989 ms.
[!] Running cycle 5 for insertion sort... sorted in 166800 ms.
[!] Running cycle 6 for insertion sort... sorted in 171431 ms.
[!] Running cycle 7 for insertion sort... sorted in 166811 ms.
[!] Running cycle 8 for insertion sort... sorted in 165200 ms.
[!] Running cycle 9 for insertion sort... sorted in 172332 ms.
[!] Running cycle 10 for insertion sort... sorted in 167740 ms.
[$] insertion sort took an average of 167628.7000 ms to sort N=100000

[!] Running cycle 1 for merge sort... sorted in 387 ms.
[!] Running cycle 2 for merge sort... sorted in 372 ms.
[!] Running cycle 3 for merge sort... sorted in 344 ms.
[!] Running cycle 4 for merge sort... sorted in 345 ms.
[!] Running cycle 5 for merge sort... sorted in 359 ms.
[!] Running cycle 6 for merge sort... sorted in 375 ms.
[!] Running cycle 7 for merge sort... sorted in 368 ms.
[!] Running cycle 8 for merge sort... sorted in 348 ms.
[!] Running cycle 9 for merge sort... sorted in 334 ms.
[!] Running cycle 10 for merge sort... sorted in 339 ms.
[$] merge sort took an average of 357.1000 ms to sort N=100000

[!] Running cycle 1 for selection sort... sorted in 91789 ms.
[!] Running cycle 2 for selection sort... sorted in 93846 ms.
[!] Running cycle 3 for selection sort... sorted in 93384 ms.
[!] Running cycle 4 for selection sort... sorted in 93990 ms.
[!] Running cycle 5 for selection sort... sorted in 91356 ms.
[!] Running cycle 6 for selection sort... sorted in 90519 ms.
[!] Running cycle 7 for selection sort... sorted in 92238 ms.
[!] Running cycle 8 for selection sort... sorted in 90581 ms.
[!] Running cycle 9 for selection sort... sorted in 88249 ms.
[!] Running cycle 10 for selection sort... sorted in 87809 ms.
[$] selection sort took an average of 91376.1000 ms to sort N=100000

[!] Running cycle 1 for smooth sort... sorted in 501 ms.
[!] Running cycle 2 for smooth sort... sorted in 550 ms.
[!] Running cycle 3 for smooth sort... sorted in 483 ms.
[!] Running cycle 4 for smooth sort... sorted in 480 ms.
[!] Running cycle 5 for smooth sort... sorted in 473 ms.
[!] Running cycle 6 for smooth sort... sorted in 491 ms.
[!] Running cycle 7 for smooth sort... sorted in 493 ms.
[!] Running cycle 8 for smooth sort... sorted in 568 ms.
[!] Running cycle 9 for smooth sort... sorted in 557 ms.
[!] Running cycle 10 for smooth sort... sorted in 542 ms.
[$] smooth sort took an average of 513.8000 ms to sort N=100000

[!] Running cycle 1 for tim sort... sorted in 303 ms.
[!] Running cycle 2 for tim sort... sorted in 304 ms.
[!] Running cycle 3 for tim sort... sorted in 319 ms.
[!] Running cycle 4 for tim sort... sorted in 314 ms.
[!] Running cycle 5 for tim sort... sorted in 311 ms.
[!] Running cycle 6 for tim sort... sorted in 321 ms.
[!] Running cycle 7 for tim sort... sorted in 320 ms.
[!] Running cycle 8 for tim sort... sorted in 317 ms.
[!] Running cycle 9 for tim sort... sorted in 309 ms.
[!] Running cycle 10 for tim sort... sorted in 315 ms.
[$] tim sort took an average of 313.3000 ms to sort N=100000


ALMOST SORTED
# === TEST FOR N =   100000 === #
[!] Running cycle 1 for heap sort... sorted in 177 ms.
[!] Running cycle 2 for heap sort... sorted in 170 ms.
[!] Running cycle 3 for heap sort... sorted in 167 ms.
[!] Running cycle 4 for heap sort... sorted in 171 ms.
[!] Running cycle 5 for heap sort... sorted in 186 ms.
[!] Running cycle 6 for heap sort... sorted in 170 ms.
[!] Running cycle 7 for heap sort... sorted in 180 ms.
[!] Running cycle 8 for heap sort... sorted in 171 ms.
[!] Running cycle 9 for heap sort... sorted in 171 ms.
[!] Running cycle 10 for heap sort... sorted in 173 ms.
[$] heap sort took an average of 173.6000 ms to sort N=100000

[!] Running cycle 1 for insertion sort... sorted in 32834 ms.
[!] Running cycle 2 for insertion sort... sorted in 33369 ms.
[!] Running cycle 3 for insertion sort... sorted in 32564 ms.
[!] Running cycle 4 for insertion sort... sorted in 32187 ms.
[!] Running cycle 5 for insertion sort... sorted in 32718 ms.
[!] Running cycle 6 for insertion sort... sorted in 32334 ms.
[!] Running cycle 7 for insertion sort... sorted in 32150 ms.
[!] Running cycle 8 for insertion sort... sorted in 33500 ms.
[!] Running cycle 9 for insertion sort... sorted in 32867 ms.
[!] Running cycle 10 for insertion sort... sorted in 32419 ms.
[$] insertion sort took an average of 32694.2000 ms to sort N=100000

[!] Running cycle 1 for merge sort... sorted in 318 ms.
[!] Running cycle 2 for merge sort... sorted in 340 ms.
[!] Running cycle 3 for merge sort... sorted in 315 ms.
[!] Running cycle 4 for merge sort... sorted in 316 ms.
[!] Running cycle 5 for merge sort... sorted in 323 ms.
[!] Running cycle 6 for merge sort... sorted in 341 ms.
[!] Running cycle 7 for merge sort... sorted in 343 ms.
[!] Running cycle 8 for merge sort... sorted in 338 ms.
[!] Running cycle 9 for merge sort... sorted in 341 ms.
[!] Running cycle 10 for merge sort... sorted in 339 ms.
[$] merge sort took an average of 331.4000 ms to sort N=100000

[!] Running cycle 1 for selection sort... sorted in 92063 ms.
[!] Running cycle 2 for selection sort... sorted in 90983 ms.
[!] Running cycle 3 for selection sort... sorted in 90895 ms.
[!] Running cycle 4 for selection sort... sorted in 90619 ms.
[!] Running cycle 5 for selection sort... sorted in 90766 ms.
[!] Running cycle 6 for selection sort... sorted in 93675 ms.
[!] Running cycle 7 for selection sort... sorted in 91332 ms.
[!] Running cycle 8 for selection sort... sorted in 90439 ms.
[!] Running cycle 9 for selection sort... sorted in 90517 ms.
[!] Running cycle 10 for selection sort... sorted in 91070 ms.
[$] selection sort took an average of 91235.9000 ms to sort N=100000

[!] Running cycle 1 for smooth sort... sorted in 189 ms.
[!] Running cycle 2 for smooth sort... sorted in 185 ms.
[!] Running cycle 3 for smooth sort... sorted in 189 ms.
[!] Running cycle 4 for smooth sort... sorted in 189 ms.
[!] Running cycle 5 for smooth sort... sorted in 180 ms.
[!] Running cycle 6 for smooth sort... sorted in 166 ms.
[!] Running cycle 7 for smooth sort... sorted in 180 ms.
[!] Running cycle 8 for smooth sort... sorted in 175 ms.
[!] Running cycle 9 for smooth sort... sorted in 196 ms.
[!] Running cycle 10 for smooth sort... sorted in 229 ms.
[$] smooth sort took an average of 187.8000 ms to sort N=100000

[!] Running cycle 1 for tim sort... sorted in 374 ms.
[!] Running cycle 2 for tim sort... sorted in 281 ms.
[!] Running cycle 3 for tim sort... sorted in 279 ms.
[!] Running cycle 4 for tim sort... sorted in 280 ms.
[!] Running cycle 5 for tim sort... sorted in 281 ms.
[!] Running cycle 6 for tim sort... sorted in 281 ms.
[!] Running cycle 7 for tim sort... sorted in 280 ms.
[!] Running cycle 8 for tim sort... sorted in 265 ms.
[!] Running cycle 9 for tim sort... sorted in 268 ms.
[!] Running cycle 10 for tim sort... sorted in 261 ms.
[$] tim sort took an average of 285.0000 ms to sort N=100000


TOTALLY REVERSED
# === TEST FOR N =   100000 === #
[!] Running cycle 1 for heap sort... sorted in 139 ms.
[!] Running cycle 2 for heap sort... sorted in 147 ms.
[!] Running cycle 3 for heap sort... sorted in 150 ms.
[!] Running cycle 4 for heap sort... sorted in 142 ms.
[!] Running cycle 5 for heap sort... sorted in 142 ms.
[!] Running cycle 6 for heap sort... sorted in 146 ms.
[!] Running cycle 7 for heap sort... sorted in 143 ms.
[!] Running cycle 8 for heap sort... sorted in 190 ms.
[!] Running cycle 9 for heap sort... sorted in 142 ms.
[!] Running cycle 10 for heap sort... sorted in 146 ms.
[$] heap sort took an average of 148.7000 ms to sort N=100000

[!] Running cycle 1 for insertion sort... sorted in 312392 ms.
[!] Running cycle 2 for insertion sort... sorted in 327189 ms.
[!] Running cycle 3 for insertion sort... sorted in 323319 ms.
[!] Running cycle 4 for insertion sort... sorted in 335780 ms.
[!] Running cycle 5 for insertion sort... sorted in 344610 ms.
[!] Running cycle 6 for insertion sort... sorted in 349076 ms.
[!] Running cycle 7 for insertion sort... sorted in 342632 ms.
[!] Running cycle 8 for insertion sort... sorted in 340363 ms.
[!] Running cycle 9 for insertion sort... sorted in 342767 ms.
[!] Running cycle 10 for insertion sort... sorted in 341576 ms.
[$] insertion sort took an average of 335970.4000 ms to sort N=100000

[!] Running cycle 1 for merge sort... sorted in 346 ms.
[!] Running cycle 2 for merge sort... sorted in 339 ms.
[!] Running cycle 3 for merge sort... sorted in 330 ms.
[!] Running cycle 4 for merge sort... sorted in 343 ms.
[!] Running cycle 5 for merge sort... sorted in 337 ms.
[!] Running cycle 6 for merge sort... sorted in 340 ms.
[!] Running cycle 7 for merge sort... sorted in 339 ms.
[!] Running cycle 8 for merge sort... sorted in 338 ms.
[!] Running cycle 9 for merge sort... sorted in 341 ms.
[!] Running cycle 10 for merge sort... sorted in 333 ms.
[$] merge sort took an average of 338.6000 ms to sort N=100000

[!] Running cycle 1 for selection sort... sorted in 107136 ms.
[!] Running cycle 2 for selection sort... sorted in 106579 ms.
[!] Running cycle 3 for selection sort... sorted in 105526 ms.
[!] Running cycle 4 for selection sort... sorted in 101133 ms.
[!] Running cycle 5 for selection sort... sorted in 100809 ms.
[!] Running cycle 6 for selection sort... sorted in 104803 ms.
[!] Running cycle 7 for selection sort... sorted in 101290 ms.
[!] Running cycle 8 for selection sort... sorted in 99739 ms.
[!] Running cycle 9 for selection sort... sorted in 103779 ms.
[!] Running cycle 10 for selection sort... sorted in 100112 ms.
[$] selection sort took an average of 103090.6000 ms to sort N=100000

[!] Running cycle 1 for smooth sort... sorted in 392 ms.
[!] Running cycle 2 for smooth sort... sorted in 361 ms.
[!] Running cycle 3 for smooth sort... sorted in 355 ms.
[!] Running cycle 4 for smooth sort... sorted in 350 ms.
[!] Running cycle 5 for smooth sort... sorted in 364 ms.
[!] Running cycle 6 for smooth sort... sorted in 379 ms.
[!] Running cycle 7 for smooth sort... sorted in 365 ms.
[!] Running cycle 8 for smooth sort... sorted in 364 ms.
[!] Running cycle 9 for smooth sort... sorted in 366 ms.
[!] Running cycle 10 for smooth sort... sorted in 368 ms.
[$] smooth sort took an average of 366.4000 ms to sort N=100000

[!] Running cycle 1 for tim sort... sorted in 302 ms.
[!] Running cycle 2 for tim sort... sorted in 299 ms.
[!] Running cycle 3 for tim sort... sorted in 301 ms.
[!] Running cycle 4 for tim sort... sorted in 301 ms.
[!] Running cycle 5 for tim sort... sorted in 289 ms.
[!] Running cycle 6 for tim sort... sorted in 289 ms.
[!] Running cycle 7 for tim sort... sorted in 304 ms.
[!] Running cycle 8 for tim sort... sorted in 294 ms.
[!] Running cycle 9 for tim sort... sorted in 299 ms.
[!] Running cycle 10 for tim sort... sorted in 303 ms.
[$] tim sort took an average of 298.1000 ms to sort N=100000


